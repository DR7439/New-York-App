version: "3.8"

services:
  backend:
    build:
      context: ./backend
    container_name: django_backend
    command: >
      bash -c "/wait-for-it.sh db:5432 -- /wait-for-it.sh redis:6379 -- python manage.py migrate &&
             python manage.py shell -c \"from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='$DJANGO_SUPERUSER_USERNAME').exists() or User.objects.create_superuser('$DJANGO_SUPERUSER_USERNAME', '$DJANGO_SUPERUSER_EMAIL', '$DJANGO_SUPERUSER_PASSWORD')\" &&
             python manage.py loaddata myapp/fixtures/interests.json &&
             python manage.py import_zones /mnt/data/taxi_zones_manhattan.geojson &&
             python manage.py import_population_data /mnt/data/census_final.csv &&
             python manage.py import_interests /mnt/data/merged_zone_sector_counts.csv &&
             python manage.py load_billboards /mnt/data/no_text_signs_df.csv &&
             python manage.py load_advertising_locations /mnt/data/advertising_locations.csv &&
             python manage.py model_down && 
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
      - ./backend/mnt/data:/mnt/data
    ports:
      - "8000:8000"
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    depends_on:
      - db
      - redis
    networks:
      - mynetwork

  populate_busyness:
    build:
      context: ./backend
    container_name: populate_busyness
    command: bash /app/populate_busyness.sh
    volumes:
      - ./backend:/app
      - ./backend/mnt/data:/mnt/data
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
    depends_on:
      - backend
    networks:
      - mynetwork

  celery:
    build:
      context: ./backend
    container_name: celery_worker
    command: celery -A target_advert worker --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - backend
      - redis
    networks:
      - mynetwork

  redis:
    image: redis:6
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - mynetwork

  frontend:
    build:
      context: ./frontend/myfrontend
    container_name: react_frontend
    volumes:
      - ./frontend:/myfrontend
      - /myfrontend/node_modules
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
    networks:
      - mynetwork

  db:
    image: postgres:16
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - mynetwork

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/myfrontend/build:/usr/share/nginx/html:ro
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    networks:
      - mynetwork

volumes:
  postgres_data:

networks:
  mynetwork:
    driver: bridge
